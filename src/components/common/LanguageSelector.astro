---
import Icon from './Icon.astro';

const { defaultLanguageName, languages } = Astro.props;
---

<style>
  .LanguageSelector {
    position: relative;
    overflow: hidden;

    display: flex;
    align-items: center;
    padding: var(--space-xxs);

    background-color: var(--color-bg-default);
    border: 1px solid var(--color-border-default);
    border-radius: var(--radius);

    font-weight: 500;
    color: var(--color-fg-muted);
  }

  .LanguageSelector:hover {
    border-color: var(--color-border-emphasis);
    color: var(--color-fg-default);
  }

  .LanguageSelector:focus-within {
    border-color: var(--color-border-primary);
    outline: 1px solid var(--color-border-primary);
  }

  .LanguageSelector__select {
    position: absolute;
    top: 0;
    left: 0;
    width: 100%;
    height: 100%;
    opacity: 0;
  }

  @media screen and (min-width: 769px) {
    .LanguageSelector {
      padding-inline: var(--space-sm);
    }

    .LanguageSelector__icon {
      margin-inline-end: 0.33em;
    }

    .LanguageSelector__chevron {
      margin-inline-start: var(--space-xs);
    }
  }

  @media screen and (max-width: 768px) {
    .LanguageSelector__label,
    .LanguageSelector__chevron {
      display: none;
    }
  }
</style>

<script>
  window.addEventListener('DOMContentLoaded', () => {
    document.querySelectorAll('.LanguageSelector').forEach((selector) => {
      if (!window.location.hostname.endsWith('translate.goog')) {
        selector.hidden = false;
      }

      selector.addEventListener('change', (event) => {
        const { value } = event.target;

        if (!value) {
          return;
        }

        const url = new URL('http://translate.google.com/translate');
        url.searchParams.set('sl', 'en');
        url.searchParams.set('tl', value);
        url.searchParams.set('u', window.location.href);

        window.location.href = url;
      });
    });
  });
</script>

<div class="LanguageSelector" hidden>
  <Icon icon="language" className="LanguageSelector__icon" />
  <span class="LanguageSelector__label" aria-hidden="true">
    {defaultLanguageName}
  </span>
  <Icon icon="chevron-down" className="LanguageSelector__chevron" />

  <label for="language-selector" class="visually-hidden">
    Select language:
  </label>

  <select id="language-selector" class="LanguageSelector__select">
    <option selected value="" translate="no">
      {defaultLanguageName}
    </option>
    {
      Object.entries(languages).map(([code, name]) => (
        <option value={code} lang={code} translate="no">
          {name}
        </option>
      ))
    }
  </select>
</div>
